{"version":3,"sources":["robots.js","SearchBox.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","job","SearchBox","_ref","searchfiled","search","react_default","a","createElement","type","placeholder","onChange","Card","className","src","concat","CardList","map","user","i","src_Card_0","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filterrobots","filter","robot","toLowerCase","includes","src_SearchBox","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAAaA,EAAS,CAClB,CACIC,GAAI,EACJC,KAAM,cACNC,IAAK,iBAET,CACIF,GAAI,EACJC,KAAM,aACNC,IAAK,gBAET,CACIF,GAAI,EACJC,KAAM,eACNC,IAAK,cAET,CACIF,GAAI,EACJC,KAAM,YACNC,IAAK,iBAET,CACIF,GAAI,EACJC,KAAM,eACNC,IAAK,iBAET,CACIF,GAAI,EACJC,KAAM,cACNC,IAAK,kBClBEC,SARG,SAAAC,GAA2BA,EAAzBC,YAAyB,IAAZC,EAAYF,EAAZE,OAE7B,OACIC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASC,YAAY,oBAAoBC,SAAUN,MCgBxDO,QAlBF,SAAAT,GAAmB,IAAjBH,EAAiBG,EAAjBH,KAAKC,EAAYE,EAAZF,IAAIF,EAAQI,EAARJ,GAEpB,OAEIO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QAETP,EAAAC,EAAAC,cAAA,OAAKM,IAAG,wBAAAC,OAA0BhB,EAA1B,mBACRO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKR,GACLM,EAAAC,EAAAC,cAAA,SAAIP,QCYTe,EArBE,SAAAb,GAAc,IAAZL,EAAYK,EAAZL,OAGf,OAECQ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,WAEJf,EAAOmB,IAAI,SAACC,EAAKC,GAEb,OACIb,EAAAC,EAAAC,cAACY,EAAD,CAAMrB,GAAID,EAAOqB,GAAGpB,GACpBC,KAAMF,EAAOqB,GAAGnB,KAChBC,IAAKH,EAAOqB,GAAGlB,UC6BxBoB,cAtCX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAC3B,YAAa0B,EAAME,OAAOC,SAbzCX,EAAKY,MAAO,CAERpC,OAAQ,GACRM,YAAa,IALPkB,mFAWVG,KAAKM,SAAU,CAACjC,OAASA,qCAQpB,IAAAqC,EAAAV,KAECW,EAAeX,KAAKS,MAAMpC,OAAOuC,OAAO,SAAAC,GAC1C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASL,EAAKD,MAAM9B,YAAYmC,iBAGpE,OACIjC,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACiC,EAAD,CAAWpC,OAAQoB,KAAKI,iBACxBvB,EAAAC,EAAAC,cAACkC,EAAD,CAAU5C,OAAQsC,YAhCZO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAEP5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD0H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b7f99f3c.chunk.js","sourcesContent":["export const robots = [\r\n    {\r\n        id: 1,\r\n        name: \"Kris Thiyds\",\r\n        job: \"Web developer\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Simth Kris\",\r\n        job: \"Web Designer\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Mike Rylcves\",\r\n        job: \"Web hacker\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Kris Adam\",\r\n        job: \"Web developer\"\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"Nadin Thiyds\",\r\n        job: \"Web developer\"\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"Kris Thiyds\",\r\n        job: \"Web developer\"\r\n    }\r\n\r\n\r\n]","import React from 'react';\r\nimport serach from './Searchbox.css';\r\n\r\nconst SearchBox = ({searchfiled, search}) => {\r\n\r\n    return (\r\n        <input type='search' placeholder=\"Search some thing\" onChange={search}/>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = ({name,job,id}) => {\r\n\r\n    return (\r\n\r\n        <div>\r\n          <div className=\"card\">\r\n           \r\n                <img src={`https://robohash.org/${id}' alt=\"potot`}/>\r\n                <div>\r\n                    <h1>{name}</h1>\r\n                    <p>{job}</p>\r\n               \r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card';\r\nimport './Card.css';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n   \r\n    return (\r\n\r\n     <div className=\"content\">\r\n            {\r\n                robots.map((user,i) =>\r\n                {\r\n                    return  (\r\n                        <Card id={robots[i].id} \r\n                        name={robots[i].name} \r\n                        job={robots[i].job}/>\r\n                    );\r\n                })               \r\n            }\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","import React,{ Component } from \"react\";\r\nimport {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport CardList from './CardList';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state ={\r\n\r\n            robots: [],\r\n            searchfiled: ''\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState( {robots : robots})\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfiled: event.target.value})\r\n       \r\n    }\r\n\r\n    render() {\r\n\r\n        const filterrobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfiled.toLowerCase());\r\n        })\r\n\r\n        return (\r\n            <div>\r\n    \r\n            <h1>Robots friends</h1>\r\n            <SearchBox search={this.onSearchChange} />\r\n            <CardList robots={filterrobots}/>\r\n    \r\n            </div>\r\n        );\r\n    }\r\n   \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}